/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ecg.reader;

import javax.swing.JOptionPane;

/**
 *
 * @author Sanja
 */
public class ECGReader extends javax.swing.JFrame {
        
    /**
     * Creates new form ECGReader
     */
    public ECGReader() {
        initComponents();
       
        
    }
   
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtHearthRate = new javax.swing.JLabel();
        inputHearthRate = new javax.swing.JTextField();
        submit = new javax.swing.JButton();
        txtRhythm = new javax.swing.JLabel();
        inputRhythm = new javax.swing.JTextField();
        txtQRS = new javax.swing.JLabel();
        inputQRS = new javax.swing.JTextField();
        txtST = new javax.swing.JLabel();
        inputST = new javax.swing.JTextField();
        txtT = new javax.swing.JLabel();
        inputT = new javax.swing.JTextField();
        txtQrs = new javax.swing.JLabel();
        inputQrs = new javax.swing.JTextField();
        txtqt = new javax.swing.JLabel();
        inputQT = new javax.swing.JTextField();
        txtP = new javax.swing.JLabel();
        inputPwave = new javax.swing.JTextField();
        txtleadI = new javax.swing.JLabel();
        txtAvf = new javax.swing.JLabel();
        txtleadII = new javax.swing.JLabel();
        inputLeadI = new javax.swing.JTextField();
        inputLeadavF = new javax.swing.JTextField();
        inputleadII = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtHearthRate.setText("1. What is the hearth rate?");

        inputHearthRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputHearthRateActionPerformed(evt);
            }
        });

        submit.setText("Submit");
        submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitMouseClicked(evt);
            }
        });
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        txtRhythm.setText("2. Is the rhythm regular or irregular? ( r / ir )");

        inputRhythm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputRhythmActionPerformed(evt);
            }
        });

        txtQRS.setText("3. Is the QRS complex narrow or wide  (3 small boxes = 0.12s ) ? (n/w)");

        inputQRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputQRSActionPerformed(evt);
            }
        });

        txtST.setText("4. ST changes? (y/n)");

        inputST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSTActionPerformed(evt);
            }
        });

        txtT.setText("4. T-waves abnormality? (y/n)");

        txtQrs.setText("5. QRS abnormalities? (y/n)");

        txtqt.setText("6. QT abnormalities? (y/n)");

        txtP.setText("7. P-wave ana PR abnormlities? (y/n)");

        txtleadI.setText("8. R wave in Lead I (+/-)?");

        txtAvf.setText("9.R wave in lead aVf (+/-)?");

        txtleadII.setText("10 R wave in lead II (+/-)?");

        inputLeadavF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputLeadavFActionPerformed(evt);
            }
        });

        inputleadII.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputleadIIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtRhythm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHearthRate, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(inputHearthRate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(175, 175, 175)
                                .addComponent(inputRhythm, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQRS, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtST)
                            .addComponent(txtT)
                            .addComponent(txtQrs)
                            .addComponent(txtqt)
                            .addComponent(txtP)
                            .addComponent(txtleadII)
                            .addComponent(txtAvf)
                            .addComponent(txtleadI))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputQRS, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputLeadI, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputPwave, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputQrs, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputT, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputST, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputQT, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputLeadavF, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputleadII, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHearthRate)
                    .addComponent(submit)
                    .addComponent(inputHearthRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRhythm)
                    .addComponent(inputRhythm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQRS)
                    .addComponent(inputQRS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtST)
                    .addComponent(inputST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtT)
                    .addComponent(inputT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQrs)
                    .addComponent(inputQrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtqt)
                    .addComponent(inputQT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtP)
                    .addComponent(inputPwave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtleadI)
                    .addComponent(inputLeadI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAvf)
                    .addComponent(inputLeadavF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtleadII)
                    .addComponent(inputleadII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(134, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(752, 550));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputHearthRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputHearthRateActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_inputHearthRateActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_submitActionPerformed

    private void submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitMouseClicked
        // TODO add your handling code here:
        //hearth rate
        try{
           String f=inputHearthRate.getText();
           
            int fr=Integer.parseInt(f);
            if(fr<60){
            BradycardiaGeneral br=new BradycardiaGeneral();
            br.setVisible(true);
            }
            else if (fr>=100){
            
                String qrs=inputQRS.getText();
                String rhythm=inputRhythm.getText();
                if (("n".equals(qrs))&&("r".equals(rhythm))){
               TachycardiaNR thcard=new TachycardiaNR();
                  thcard.setVisible(true);
               }
                else if(("n".equals(qrs))&&("ir".equals(rhythm))){
                  TachycardiaNIR thcardy=new TachycardiaNIR();
                  thcardy.setVisible(true);
                }
                else if(("w".equals(qrs))&&("r".equals(rhythm))){
                 TchycardiaWRg tachyc=new TchycardiaWRg();
                  tachyc.setVisible(true);
                }
                 else if(("w".equals(qrs))&&("ir".equals(rhythm))){
                 TachycardiaWIRg t=new TachycardiaWIRg();
                  t.setVisible(true);
                 }
                 
         
            }
                
            else if(fr>=60 && fr<100){
            if("y".equals(inputQrs.getText())||("w".equals(inputQRS.getText()))){
                QRS_complex q=new QRS_complex();
                  q.setVisible(true);
                
            }
            else if("n".equals(inputQrs.getText())&&("n".equals(inputQRS.getText()))&& ("r".equals(inputRhythm.getText())) && ("n".equals(inputST.getText())) && ("n".equals(inputT.getText())) && ("n".equals(inputQT.getText())) && ("n".equals(inputPwave.getText())) ){
                           JOptionPane.showMessageDialog(null,"Normal ECG","alert",JOptionPane.PLAIN_MESSAGE);

            }
            }
            else{
               JOptionPane.showMessageDialog(null,"The wrong input!","alert",JOptionPane.PLAIN_MESSAGE);
               }
           }catch(Exception e){           
               JOptionPane.showMessageDialog(null,"The wrong input!","alert",JOptionPane.PLAIN_MESSAGE);
}
         
        if("y".equals(inputST.getText())){
        STsegment st=new STsegment();
                  st.setVisible(true);
        }else{}
        if("y".equals(inputT.getText())){
        Twav t=new Twav();
                  t.setVisible(true);
        }else{}
         if("y".equals(inputQT.getText())){
                QTinterval qt=new QTinterval();
                 qt.setVisible(true);
        }else{}
         
           if("y".equals(inputPwave.getText())){
                PwavePR pr=new PwavePR();
                 pr.setVisible(true);
        }else{}
              if(("+".equals(inputLeadI.getText())&&"+".equals(inputLeadavF.getText()))||("-".equals(inputLeadavF.getText())&&("+".equals(inputleadII.getText())))){
                  
                  JOptionPane.showMessageDialog(null,"Normal hearth axis.","Therapy",JOptionPane.PLAIN_MESSAGE);

        }
              else if ("+".equals(inputLeadI.getText())&&"-".equals(inputLeadavF.getText())){
                  JOptionPane.showMessageDialog(null,"Left hearth axis deviation.","Therapy",JOptionPane.PLAIN_MESSAGE);
              }
                else if ("-".equals(inputLeadI.getText())&&"+".equals(inputLeadavF.getText())){
                  JOptionPane.showMessageDialog(null,"Right hearth axis deviation.","Therapy",JOptionPane.PLAIN_MESSAGE);
              }
                  else if ("-".equals(inputLeadI.getText())&&"-".equals(inputLeadavF.getText())){
                  JOptionPane.showMessageDialog(null,"Extreme  right hearth axis deviation.","Therapy",JOptionPane.PLAIN_MESSAGE);
              }
              else{}
              
              if( "".equals(inputHearthRate.getText()) || "".equals(inputLeadI.getText()) || "".equals(inputLeadavF.getText()) || "".equals(inputQRS.getText()) || "".equals(inputPwave.getText()) || "".equals(inputQT.getText()) || "".equals(inputST.getText()) || "".equals(inputT.getText()) || "".equals(inputRhythm.getText()) ){
                 JOptionPane.showMessageDialog(null,"Input all fields please.","Therapy",JOptionPane.PLAIN_MESSAGE);

              }else if(
                    (!"+".equals(inputLeadI.getText()) && !"-".equals(inputLeadI.getText())) ||
                      (!"+".equals(inputLeadavF.getText()) && !"-".equals(inputLeadavF.getText())) || 
                      (!"n".equals(inputQRS.getText()) && !"w".equals(inputQRS.getText()))  ||
                        (!"y".equals(inputQrs.getText()) && !"n".equals(inputQrs.getText()))  ||
                        (!"y".equals(inputQT.getText()) && !"n".equals(inputQT.getText()))  ||
                        (!"y".equals(inputST.getText()) && !"n".equals(inputST.getText()) ) ||
                        (!"y".equals(inputPwave.getText()) && !"n".equals(inputPwave.getText())) ||
                        (!"y".equals(inputT.getText()) && !"n".equals(inputT.getText() )) ||
                        (!"r".equals(inputRhythm.getText()) && !"ir".equals(inputRhythm.getText())) 


                  ){
                  JOptionPane.showMessageDialog(null,"Wrong input! Please check all fields. ","Therapy",JOptionPane.PLAIN_MESSAGE);

              }else{}
        
    }//GEN-LAST:event_submitMouseClicked

    private void inputQRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputQRSActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_inputQRSActionPerformed

    private void inputRhythmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputRhythmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputRhythmActionPerformed

    private void inputSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputSTActionPerformed

    private void inputLeadavFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputLeadavFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputLeadavFActionPerformed

    private void inputleadIIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputleadIIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputleadIIActionPerformed
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ECGReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ECGReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ECGReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ECGReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ECGReader().setVisible(true);
            }
        });
       

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputHearthRate;
    private javax.swing.JTextField inputLeadI;
    private javax.swing.JTextField inputLeadavF;
    private javax.swing.JTextField inputPwave;
    public javax.swing.JTextField inputQRS;
    private javax.swing.JTextField inputQT;
    private javax.swing.JTextField inputQrs;
    public javax.swing.JTextField inputRhythm;
    private javax.swing.JTextField inputST;
    private javax.swing.JTextField inputT;
    private javax.swing.JTextField inputleadII;
    private javax.swing.JButton submit;
    private javax.swing.JLabel txtAvf;
    private javax.swing.JLabel txtHearthRate;
    private javax.swing.JLabel txtP;
    private javax.swing.JLabel txtQRS;
    private javax.swing.JLabel txtQrs;
    private javax.swing.JLabel txtRhythm;
    private javax.swing.JLabel txtST;
    private javax.swing.JLabel txtT;
    private javax.swing.JLabel txtleadI;
    private javax.swing.JLabel txtleadII;
    private javax.swing.JLabel txtqt;
    // End of variables declaration//GEN-END:variables
}
